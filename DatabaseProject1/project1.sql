-- MySQL Script generated by MySQL Workbench
-- Thu 05 Apr 2018 09:54:31 AM MDT
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

-- Nathan Lile 
-- Collaborators: Justin Bryan and Peter Borrell

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `mydb` ;

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
SHOW WARNINGS;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`department`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`department` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `mydb`.`department` (
  `department_id` INT NOT NULL AUTO_INCREMENT,
  `department_name` VARCHAR(5) NOT NULL,
  PRIMARY KEY (`department_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`employee_info`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`employee_info` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `mydb`.`employee_info` (
  `employee_id` INT NOT NULL,
  `employee_social_security_number` INT(10) NOT NULL,
  `employee_first_name` VARCHAR(45) NOT NULL,
  `employee_middle_name` VARCHAR(45) NOT NULL,
  `employee_last_name` VARCHAR(45) NOT NULL,
  `employee_birth_date` DATE NOT NULL,
  `employee_phone_number` INT(10) NOT NULL,
  `employee_email` VARCHAR(60) NOT NULL,
  `employee_address` VARCHAR(45) NOT NULL,
  `employee_city` VARCHAR(45) NOT NULL,
  `employee_postal` VARCHAR(10) NOT NULL,
  `employee_sabbatical` TINYINT(1) NOT NULL DEFAULT 0,
  `department_department_id` INT NOT NULL,
  PRIMARY KEY (`employee_id`),
  INDEX `fk_employee_info_department1_idx` (`department_department_id` ASC),
  CONSTRAINT `fk_employee_info_department1`
    FOREIGN KEY (`department_department_id`)
    REFERENCES `mydb`.`department` (`department_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`student_info`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`student_info` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `mydb`.`student_info` (
  `student_id` INT NOT NULL AUTO_INCREMENT,
  `student_social_security_number` INT(10) NOT NULL,
  `student_first_name` VARCHAR(45) NOT NULL,
  `student_middle_name` VARCHAR(45) NOT NULL,
  `student_last_name` VARCHAR(45) NOT NULL,
  `student_birthdate` DATE NOT NULL,
  `student_phone_number` INT(10) NOT NULL,
  `student_email` VARCHAR(60) NOT NULL,
  `student_address` VARCHAR(45) NOT NULL,
  `student_city` VARCHAR(45) NOT NULL,
  `student_postal` VARCHAR(10) NOT NULL,
  `employee_info_employee_id` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`student_id`),
  INDEX `last_name_first_name` (`student_last_name` ASC, `student_first_name` ASC),
  INDEX `fk_student_info_employee_info1_idx` (`employee_info_employee_id` ASC),
  CONSTRAINT `fk_student_info_employee_info1`
    FOREIGN KEY (`employee_info_employee_id`)
    REFERENCES `mydb`.`employee_info` (`employee_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`classroom`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`classroom` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `mydb`.`classroom` (
  `classroom_id` INT NOT NULL AUTO_INCREMENT,
  `building` VARCHAR(45) NOT NULL,
  `classroom_number` VARCHAR(10) NOT NULL,
  `classroom_size` INT(3) NOT NULL,
  PRIMARY KEY (`classroom_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`semester`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`semester` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `mydb`.`semester` (
  `semester_id` INT NOT NULL AUTO_INCREMENT,
  `semester` VARCHAR(15) NOT NULL,
  PRIMARY KEY (`semester_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`course_catalog`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`course_catalog` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `mydb`.`course_catalog` (
  `course_catalog_id` INT NOT NULL AUTO_INCREMENT,
  `department_department_id` INT NOT NULL,
  `course_number` INT(4) NOT NULL,
  `course_description` LONGTEXT NOT NULL,
  `course_credit` INT(1) NULL,
  PRIMARY KEY (`course_catalog_id`, `department_department_id`),
  INDEX `fk_course_catalog_department1_idx` (`department_department_id` ASC),
  CONSTRAINT `fk_course_catalog_department1`
    FOREIGN KEY (`department_department_id`)
    REFERENCES `mydb`.`department` (`department_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`section_in_term`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`section_in_term` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `mydb`.`section_in_term` (
  `section_in_term_id` INT NOT NULL AUTO_INCREMENT,
  `semester_semester_id` INT NOT NULL,
  `classroom_classroom_id` INT NOT NULL,
  `section_time` TIME NOT NULL,
  `section_day` TINYINT(6) NOT NULL,
  `course_catalog_course_catalog_id` INT NOT NULL,
  `section_number` INT(2) NOT NULL,
  `employee_info_employee_id` INT NOT NULL,
  PRIMARY KEY (`section_in_term_id`, `semester_semester_id`, `classroom_classroom_id`, `course_catalog_course_catalog_id`, `employee_info_employee_id`),
  INDEX `fk_section_in_term_semester1_idx` (`semester_semester_id` ASC),
  INDEX `fk_section_in_term_classroom1_idx` (`classroom_classroom_id` ASC),
  INDEX `fk_section_in_term_course_catalog1_idx` (`course_catalog_course_catalog_id` ASC),
  INDEX `fk_section_in_term_employee_info1_idx` (`employee_info_employee_id` ASC),
  CONSTRAINT `fk_section_in_term_semester1`
    FOREIGN KEY (`semester_semester_id`)
    REFERENCES `mydb`.`semester` (`semester_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_section_in_term_classroom1`
    FOREIGN KEY (`classroom_classroom_id`)
    REFERENCES `mydb`.`classroom` (`classroom_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_section_in_term_course_catalog1`
    FOREIGN KEY (`course_catalog_course_catalog_id`)
    REFERENCES `mydb`.`course_catalog` (`course_catalog_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_section_in_term_employee_info1`
    FOREIGN KEY (`employee_info_employee_id`)
    REFERENCES `mydb`.`employee_info` (`employee_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`student_transcript`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`student_transcript` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `mydb`.`student_transcript` (
  `student_info_student_id` INT NOT NULL,
  `section_in_term_section_in_term_id` INT NOT NULL,
  `student_transcript_retake` TINYINT(1) NOT NULL DEFAULT 0,
  `student_transcript_grade` DECIMAL(5,2) NOT NULL,
  PRIMARY KEY (`student_info_student_id`, `section_in_term_section_in_term_id`),
  INDEX `fk_student_transcript_section_in_term1_idx` (`section_in_term_section_in_term_id` ASC),
  CONSTRAINT `fk_student_transcript_student_info1`
    FOREIGN KEY (`student_info_student_id`)
    REFERENCES `mydb`.`student_info` (`student_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_student_transcript_section_in_term1`
    FOREIGN KEY (`section_in_term_section_in_term_id`)
    REFERENCES `mydb`.`section_in_term` (`section_in_term_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`student_major`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`student_major` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `mydb`.`student_major` (
  `student_info_student_id` INT NOT NULL,
  `department_department_id` INT NOT NULL,
  `semester_semester_id` INT NOT NULL,
  `active_major` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`student_info_student_id`, `department_department_id`),
  INDEX `fk_student_info_has_department_department1_idx` (`department_department_id` ASC),
  INDEX `fk_student_info_has_department_student_info1_idx` (`student_info_student_id` ASC),
  INDEX `fk_student_major_semester1_idx` (`semester_semester_id` ASC),
  CONSTRAINT `fk_student_info_has_department_student_info1`
    FOREIGN KEY (`student_info_student_id`)
    REFERENCES `mydb`.`student_info` (`student_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_student_info_has_department_department1`
    FOREIGN KEY (`department_department_id`)
    REFERENCES `mydb`.`department` (`department_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_student_major_semester1`
    FOREIGN KEY (`semester_semester_id`)
    REFERENCES `mydb`.`semester` (`semester_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

SHOW WARNINGS;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Assumptions
-- For student, the employee that does the advising has to be set for a proper foreign key relation. So I have a default value of 0 in that field to output the advisor is in the department.
--Semester and department are indexed to lower record size
--The amount of active majors is handled in framework, since they can have no more than two it is adding bool 1's to see if the major is active
--Student ID numbers will be assigned after the fact if the student only had a social security number and not a student ID.
--Course enrollment size is handled in framework by checking the amount of students in class for the section and comparing it to the room size, which has a foriegn key reference in the section table.
--I wish we had some people soft info, some records might be added to the employee table
--Day is stored in a TINYINT 6 due to binary
--The section in term table is used to get infromation for the sections and references information from the course when required
--Credit hour restrictions are handled in framework by adding course credits that the students are registered for, all with foreign key references
--There is an index for last name first name look up that gives a student ID, any enrollement can be done based on the student ID given on the transcript table.
--Course/section is found by department index
--Each course has a faultity member assigned to it and it's required for the course to be entered
--Students are not required to take classes
--Multiple sections are avaible, up to 99, framework will cap at 12
--Building and class room are the same surgate key
--Framework handles time comparison
--Faculty member cap for sections is handled in framework
--Student has an advisor key
--There is a sabbitcle flag for employees
--Semesters are index and hte actual names will be handled by framwork
--studentss are given a final course grade as 100.00 and framework can be used to pull out letter grade and calcuate the gpa in different metrics
--there is a retake flag that will be used by framework to overwrite previous course grades
